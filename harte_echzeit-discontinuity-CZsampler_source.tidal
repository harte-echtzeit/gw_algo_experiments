-- artist: harte echtzeit
-- track: discontinuity 
-- length: 6.16 min
-- composed, performed and edited by HE, September 2025
-- web: https://harte-echtzeit.com
-- repo: https://github.com/harte-echtzeit/gw_algo_experiments
-- label: Call It Anything Records, Barcelona/ESP, https://callitanythingrecords.bandcamp.com/

-- This track is completely based on samples from gravitational wave recordings of the LVK-scientific collaboration. The samples are modified versions of the data published by `R. Abbott et al. (LIGO Scientific Collaboration and Virgo Collaboration), "Open data from the first and second observing runs of Advanced LIGO and Advanced Virgo", SoftwareX 13 (2021) 100658.` which was originally licensed under a Creative Commons Attribution 4.0 International License (CC-BY).

-- This track is proudly produced with open tools. It is written in Tidal Cycles (v1.9.5-93), a Haskell-based live coding language, which uses SuperCollider (v.3.14.0-2) and SuperDirt (v1.7.3) as an audio backend as well as the TidalLooper (v1.0.0) for live mixing. It was recorded with Ardour (8.12-13) and edited with some Plugins from calf studio gear (v0.90.8-4). I'm greatful for this software to all authors and collaborators these software projects as well as to the scientific collaboration for the groundbreaking results.


-- =========== definitions and functions =======================

-- grab some interesting integer sequences here e.g. OEIS (https://oeis.org/)
-- list_euler = A000010
-- list_fractal = A025480
-- list_grav = A353769
let list_euler = [1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30, 16]
    list_fractal = [0, 0, 1, 0, 2, 1, 3, 0, 4, 2, 5, 1, 6, 3, 7, 0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15, 0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 23, 1, 24, 12, 25, 6, 26, 13, 27, 3, 28, 14, 29, 7, 30, 15, 31, 0, 32, 16, 33, 8, 34, 17, 35, 4, 36, 18, 37, 9, 38, 19, 39, 2, 40, 20, 41, 10]
    list_grav = [6, 4, 9, 2, 2, 4, 1, 4, 4, 5, 6, 4, 5, 9, 1, 2, 6, 4, 7, 1, 2, 4, 7, 4, 7, 4, 2, 4, 4, 6, 6, 8, 2, 0, 3, 1, 5, 3, 5, 9, 5, 0, 1, 6, 4, 6, 9, 1, 0, 4, 1, 9, 3, 1, 3, 4, 8, 7, 8, 0, 0, 3, 3, 4, 0, 3, 3, 2, 2, 1, 2, 8, 6, 1, 7, 1, 1, 1, 5, 9, 9, 4, 3, 1, 3, 1, 4, 4, 2, 9, 8, 3, 8, 6, 5, 2, 6, 4, 0, 8, 2, 9, 9, 0, 0]


-- defs of some very simple list manipulation
reOrgList n x = drop n x ++ take n x
maskPat l x = take l x
maskPat' o l x = take l (drop o x)

-- short-hand for using it while playing live
let a = reOrgList 6 list_grav
    pat = listToPat (maskPat 8 a)
    pat' = listToPat (reverse (maskPat 8 a))
    tilt = pF "tilt"



-- =============   INTRO (slow and mysterious) ===========
-- set bpm to half the speed for the intro only
setcps ((135/2)/60/4)

-- CPU heavy, be careful with fast
d5 $ striate "32 64"
  $ fast 1.25
  $ s "gw_cut:5*4 gw_cut:6*6 gw_cut:7*8"
  # hpf "200 100 50"
  -- # hpf 400
  # speed "-0.9"
  -- # vowel (choose["a, o, e"])
  # waveloss "20 .. 60"
  -- MAX gain 0.75
  # gain 0.4
  # room 0.3 #sz 0.9
  # fshift "<-100 150 300>"

-- interesting, bubbling sounds
d4 $ sometimes ((# squiz 2) . (# fast 3 (vowel "i a u")) . (# lpf 400)) $ sometimes (superimpose ((jux rev) . (# djf rand)))
  $ n "1 .. 9"
  # s "gw_cut"
  # pan (fast 6 $ sine)
  # room (rand)
  # legato 14
  # speed (irand 16)
  -- MAX gain 0.8
  # gain (fast 6 $ 0.2* sine)


-- a slow drone that run a long time...maybe add more randomness here!
d6 $ slow 2
  -- $ palindrome
  $ whenmod 5 3 ((#smear rand) . (# room 0.6)) 
  $ layer [id, off 0.0675 (+12), off 0.125 (+24)]
  -- $ note ("a c e g" |+ 8)
  $ note ("f a e b" |+ 8)
  #  s "gw_cut:8"
  # grain 0.3 0.4
  # tilt 0.03
  # speed "0.9"
  # octave 6
  # binshift (slow 2 $ range 0.1 0.3 $ sine)
  # room 0.1 # sz 0.7
  # pan perlin
  -- Max 0.7
  # gain 0.6


d5 $ silence
-- reset speed here (very important!!!!) 
setcps ((135/1)/60/4)


-- ===== BG voices ======
d7 $ degradeBy 0.0
  $ slow 4
 $ layer[id, (# octersub 8) . (# gain 0.7)]
 $ n "2 ~ [2|1] ~ ~ [4|6] 4 ~" # s "gw_cut"
 # grain 0.3 0.2
 # speed "-1.1"
 # coarse 8
 # lpf 2500
  -- # shape 0.3
  -- # comb 0.2
  # room 0.01 # sz 0.3
  # tilt 0.01
  -- MAX 1.5
 # gain 0.7


 d8 $ degradeBy 0.0
 $ fast 2
  -- $ rot "<0 2 4 6 8>"
  $ layer [id, rot 2]
  $ struct ("1 1 1 0 1 1 0 1") $ note "<a7 f8>" #  s "gw_cut:9"
  # grain "0.495 0.5" "0.006"
  # coarse 12
  -- # vowel "i i a"
  # ring 0.9 # ringf 42
  # shape (fast 2 $ range 0.7 0.9 $ saw)
   # hpf 600
  # tilt 0.01
  # delay 0.8
  -- MAX 0.5
  # gain 0.3


d8 $ silence




--  ================ MAIN driver ===========

-- some background clicks and drumming - stable to drive track!
d1 $ fast 4
  $ degradeBy 0.4
  $ slice 6 "6 4 1 0"
  $ sometimes (swingBy (1/2) 2)
  $ n "4 1 2 4"
  # s "gw_cut(6,8)"
  # speed "1.4"
  # shape "0.8" -- !!! adjust GAIN down!
  -- # hpf "150 300 200 500"
  -- # lpf 3500
  # legato 1
  -- # djf (slow 8 $ range 0.45 0.75 sine)
  # fshift "<-100 130>"
  -- # waveloss (pat*pat')
  -- # pan perlin
  -- # comb 0.02
  -- # vowel "a u [i|e]"
  -- # squiz "2 3"
  # smear "<0.5 4 0.8 3>"
  -- MAX gain 0.9
  # gain 0.7
  

-- BEAT 
d2 $ fast 4
  $ sometimes ((# vowel "i u"))
  $ superimpose ((# krush "<2 4>") . (# shape 0.7))
  $ grain 0.5 "0.05..0.3"
  # s "gw_cut:0"
  # hpf (pat* (range 100 450 sine))
  -- # djf 0.7
  # shape 0.8
  # dry 0.95 # room 0.05 # sz 0.9
  # distort 0.1
  -- # pan perlin
  -- MAX gain 0.65
  # gain (slow 4 $ range 0.1 0.2 sine)



-- MELODY bass/synth kinda line; reeaaaly simple
d3 $ fast 2
  $ splice 4 pat
  $ superimpose ((# hpf 120) . (# vowel "a u") . (# delay (slow 2 $ range 0 0.6 $ sine)))
  $ s "gw_cut:3(<3 5 7>,8)"
  # tilt 0.3
  # lpf 800
  # speed "<1.9 1.5>"  -- use one positive in live sometimes - weird
  # fshift "340 80 100" -- play the melody here!
  -- # smear 0.1 -- cheesy break
  --- # octersub "<6 1 2 4>" -- careful!!
  -- MAX gain 0.9 (when superimpose is active!) - MAX 0.6 when octer on top!!
  # gain 0.2
  # legato 2



--- this is the end of the universe ... kind of. but certainly the end of this track.
